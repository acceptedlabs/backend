type Query {
	""" Displays all posts in the forum. """
	posts: [Post]!
	""" Returns a post by ID. If not found, returns null. """
	postById(
		" The ID of the post to search for. "
		id: ID!
	): Post
	""" **[Auth Needed]** Returns whether or not the user is onboarded. """
	isOnboarded: Boolean!
	curUser: User
}

type Mutation {
	""" **[Auth Needed]** Onboard the user with the given information. """
	onboard(info: OnboardingInput!): User!
	""" **[Auth Needed]** Post to the forum. Returns the created Post. """
	forumPost(
		" The title for the post. "
		title: String!,
		" The body for the post, in Markdown. "
		body: String!,
		" The tag for the post. "
		tag: String!
	): Post!
	""" **[Auth Needed]** Vote on a forum post. """
	votePost(
		" The ID of the post to vote on. "
		id: ID!,
		" Whether or not to downvote the post. If `false`, will upvote the post. "
		downvote: Boolean!
	): Post!
}


type Post {
	""" The autogenerated Mongo ID of the post. """
	id: ID!
	""" The user-supplied post title. """
	title: String!
	""" The Markdown body of the post. """
	body: String!
	""" The UTC Unix timestamp of the post. """
	datetime: String!
	""" A list of replies to this specific post. """
	replies: [Reply]!
	""" The number of upvotes on this post. """
	upvotes: Int!
	""" The number of downvotes on this post. """
	downvotes: Int!
	""" The tag categorization of this post. """
	tag: String!
	""" The user that created this post. Can be `null` if the user doesn't exist anymore. """
	user: User
	"""
	**[Auth Optional]** The user's vote for this post.
	Returns null if unauthenticated or not voted on.
	Otherwise, returns -1 if downvoted, 1 if upvoted.
	"""
	myVote: Int
}

type Reply {
	id: ID!
	parentPost: Post!
	datetime: String!
	replies: [Reply]!
	body: String!
	# Technically, upvotes and downvotes are stored 
	# as an array of user IDs, but that's not exposed
	# to the client.
	upvotes: Int!
	downvotes: Int!
	user: User
}

type OnboardingInfo {
	name: String!
	mentorMentee: String!
	fieldStudy: String!
	intendedMajor: String!
	gradYear: Int!
	race: String!
	gender: String!
	finaid: Boolean!
	applyIvy: Boolean!
	applyStateFlagships: Boolean!
	applyOtherState: Boolean!
	applyOtherPrivate: Boolean!
}

input OnboardingInput {
	name: String!
	mentorMentee: String!
	fieldStudy: String!
	intendedMajor: String!
	gradYear: Int!
	race: String!
	gender: String!
	finaid: Boolean!
	applyIvy: Boolean!
	applyStateFlagships: Boolean!
	applyOtherState: Boolean!
	applyOtherPrivate: Boolean!
}

type User {
	id: ID!
	onboardingInfo: OnboardingInfo
	posts: [Post]!
	replies: [Reply]!
}